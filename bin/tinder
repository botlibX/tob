#!/usr/bin/env python3
# This file is placed in the Public Domain.


"simulate clients"


import os
import random
import queue
import shutil
import sys
import termios
import threading
import time
import _thread


sys.path.insert(0, os.getcwd())


from tob.clients import Client, Fleet, Output
from tob.command import command
from tob.handler import Event
from tob.methods import parse
from tob.objects import Object, keys
from tob.runtime import Config, boot
from tob.threads import launch
from tob.utility import elapsed, level
from tob.workdir import Workdir, skel


import tob.utility
tob.utility.DEBUG = True


NAME = Workdir.name
STARTTIME = time.time()


events = queue.Queue()
paylock = _thread.allocate_lock()
random = random.SystemRandom()


class CLI(Client):

    def __init__(self):
        Client.__init__(self)
        self.register("command", command)

    def dosay(self, channel, text):
        self.raw(text)

    def raw(self, text):
        if "v" in Config.opts:
            print(text)


class Buffer(Output):

    def __init__(self):
        Output.__init__(self)
        self.register("command", command)

    def dosay(self, channel, text):
        self.raw(text)

    def raw(self, text):
        if "v" in Config.opts:
            print(text)


class Pool:

    clients = []
    lock = threading.RLock()
    nrcpu = 1
    nrlast = 0

    @staticmethod
    def add(clt):
        Pool.clients.append(clt)

    @staticmethod
    def init(clz, nr=None):
        Pool.nrcpu = nr or os.cpu_count()
        for _x in range(Pool.nrcpu):
            clt = clz()
            clt.start()
            Pool.add(clt)

    @staticmethod
    def put(evt):
        with Pool.lock:
            if Pool.nrlast >= Pool.nrcpu-1:
                Pool.nrlast = 0
            clt = Pool.clients[Pool.nrlast]
            clt.put(evt)
            Pool.nrlast += 1


def consume():
    while True:
        try:
            event = events.get()
            event.wait()
            events.task_done()
        except (KeyboardInterrupt, EOFError):
            os._exit(0)


def payload(commands):
    with paylock:
        nmr = 0
        cmdz = sorted(keys(commands))
        if "s" in Config.opts:
            random.shuffle(cmdz)
        todo = []
        for cmd in cmdz:
            examples = getattr(commands, cmd)
            for example in examples:
                event = Event()
                event.text = cmd + " " + example
                event.type = "command"
                todo.append(event)
        for event in todo:
            Pool.put(event)
            events.put(event)
            nmr += 1
        return nmr


def wrap(function):
    old3 = None
    try:
        old3 = termios.tcgetattr(sys.stdin.fileno())
    except termios.error:
        pass
    res = None, None
    try:
        res = function()
    except (KeyboardInterrupt, EOFError):
        pass
    finally:
        if old3:
            termios.tcsetattr(sys.stdin.fileno(), termios.TCSADRAIN, old3)
    return res


def main():
    nrcommand = 0
    parse(Config, " ".join(sys.argv[1:]))
    Workdir.wdr = ".test"
    if "f" not in Config.opts:
        if os.path.exists(Workdir.wdr):
            shutil.rmtree(Workdir.wdr)
    boot()
    level(Config.level)
    skel()
    number = Config.index or 1
    threads = []
    if "z" in Config.opts:
        Pool.init(Buffer)
    else:
        Pool.init(Buffer, 1)
    for _nr in range(number):
        threads.append(launch(payload, pre))
    for thr in threads:
        nr = thr.join()
        if nr:
            nrcommand += nr
    threads = []
    for _nr in range(number):
        threads.append(launch(payload, param))
    for thr in threads:
        nr = thr.join()
        if nr:
            nrcommand += nr
    threads = []
    for _nr in range(number):
        threads.append(launch(payload,  post))
    for thr in threads:
        nr = thr.join()
        if nr:
            nrcommand += nr
    launch(consume)
    events.join()
    Fleet.shutdown()
    return number, nrcommand


param = Object()
param.cmd = [""]
param.dis = [""]
param.dpl = ["hnrss title,url", ""]
param.flt = [""]
param.fnd = ["log", "rss", "config", "todo", ""]
param.man = [""]
param.mod = [""]
param.mre = [""]
param.nme = ["hnrss hackernews", ""]
param.now = [""]
param.pwd = ["bla mekker", ""]
param.req = [""]
param.res = ["hnrss", ""]
param.srv = [""]
param.thr = [""]
param.upt = [""]
param.ver = [""]


pre = Object()
pre.cfg = ["nick=mekker", ""]
pre.imp = ["testing/feeds.opml", ""]
pre.log = ["bla", ""]
pre.rss = ["http://hnrss.org/newest", ""]
pre.tdo = ["mekker", ""]


post = Object()
post.dne = ["hnrss", ""]
post.exp = ['']
post.rem = ["hnrss", ""]



if __name__ == "__main__":
    nrz, commandz = wrap(main)
    if nrz is None and commandz is None:
        os._exit(1)
    endtime = time.time()
    lap = elapsed(endtime-STARTTIME)
    nrevents = events.qsize()
    percall = (endtime-STARTTIME)/(commandz)
    if "v" in Config.opts:
        print(f"{Pool.nrcpu} cpu's used")
        print(f"{nrevents} events left.")
        print(f"total: {lap} nrs: {nrz} commands: {commandz} call: %.6fs" % percall)
    sys.exit()
